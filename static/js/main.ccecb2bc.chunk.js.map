{"version":3,"sources":["components/About.js","components/Molecules.js","components/Content.js","components/Header.js","components/Input.js","components/ShowMF.js","components/getIdCodes.js","App.js","serviceWorker.js","index.js"],"names":["About","className","href","Molecules","props","idCodes","map","entry","key","idCode","style","msStyle","idcode","width","height","background","border","padding","Content","content","errorStyle","loadingStyle","color","fontSize","textAlign","fontWeight","Header","headerStyle","linkStyle","to","textDecoration","Input","useState","input","state","setState","onSubmit","event","preventDefault","setMF","display","type","name","flex","placeholder","value","onChange","target","ShowMF","mfStyle","mf","borderBottom","a","options","maxResults","fetch","headers","method","response","json","results","slice","App","setContent","setIdCodes","useEffect","getIdCodes","then","catch","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ccecb2bc.chunk.js","sourcesContent":["import React from 'react';\nimport './About.css';\n\n// the <React.Fragment> tag is a tag that is empty -> it corresponds to nothing in the DOM\nexport default function About() {\n  return (\n    <div className=\"aboutStyle\">\n      <h1>About</h1>\n      <p>Structural isomers calculator app</p>\n      <p>Version: v1.0.0</p>\n      <p>This app only accepts organic molecules.</p>\n      <p>\n        We are aware that some of the results of the calculator are impossible\n        isomers (for instance with azotes). This is caused by the tool used to\n        generate them (M. M. Jaghoori et al., ‘PMG: Multi-core metabolite\n        identification’, Electron. Notes Theor. Comput. Sci., vol. 299, pp.\n        53–60, 2013.).\n      </p>\n      <p>\n        Github repository:{' '}\n        <a\n          className=\"link\"\n          href=\"https://github.com/opatiny/react-mol-structures\"\n        >\n          https://github.com/opatiny/react-mol-structures\n        </a>\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { IdcodeSvgRenderer } from 'react-ocl';\n\nimport './Molecules.css';\n\nexport default function Molecules(props) {\n  return (\n    <div className=\"molStyle\">\n      {props.idCodes.map((entry) => (\n        <div key={entry.idCode} style={msStyle}>\n          <IdcodeSvgRenderer idcode={entry.idCode} width={100} height={60} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst msStyle = {\n  background: '#f4f4f4',\n  border: '1px solid #ccc',\n  padding: '15px',\n};\n","// function-based component! (vs class-based components)\n\nimport React from 'react';\n\nimport Molecules from './Molecules';\n\nexport default function Content(props) {\n  switch (props.content) {\n    case 'molecules':\n      return <Molecules idCodes={props.idCodes} />;\n    case 'error':\n      return <p style={errorStyle}>ERROR: Invalid molecular formula</p>;\n    case 'loading':\n      return <p style={loadingStyle}>Loading...</p>;\n    default:\n      break;\n  }\n}\n\nconst errorStyle = {\n  color: 'red',\n  fontSize: '20px',\n  textAlign: 'center',\n  padding: '10px',\n  fontWeight: 'bold',\n};\n\nconst loadingStyle = {\n  fontSize: '20px',\n  textAlign: 'center',\n  padding: '10px',\n  fontWeight: 'bold',\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>Structural isomers calculator</h1>\n      <Link style={linkStyle} to=\"/react-mol-structures\">\n        Home\n      </Link>{' '}\n      |{' '}\n      <Link style={linkStyle} to=\"/react-mol-structures/about\">\n        About\n      </Link>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  background: '#334',\n  color: '#fff',\n  textAlign: 'center',\n  padding: '10px',\n};\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none',\n};\n","import React, { useState } from 'react';\n\nexport default function Input(props) {\n  // this is a component state\n  const [state, setState] = useState({\n    input: '',\n  });\n\n  function onSubmit(event) {\n    event.preventDefault(); // ?\n    props.setMF(state.input);\n    setState({ input: '' });\n  }\n\n  function handleNewEntry(event) {\n    setState({ [event.target.name]: event.target.value });\n  }\n\n  return (\n    <form onSubmit={onSubmit} style={{ display: 'flex' }}>\n      <input\n        type=\"text\"\n        name=\"input\"\n        style={{ flex: '10', padding: '5px' }}\n        placeholder=\"Enter a simple organic molecular formula ...\"\n        value={state.input}\n        onChange={handleNewEntry}\n      />\n      <input\n        type=\"submit\"\n        value=\"Submit\"\n        className=\"button\"\n        style={{ flex: '1' }}\n      />\n    </form>\n  );\n}\n","import React from 'react';\nimport { MF } from 'react-mf';\n\nexport default function ShowMF(props) {\n  return (\n    <div style={mfStyle}>\n      <style>\n        {`.mfTxtStyle {\n                font-weight: bold;\n                font-size: 20px;\n              }`}\n      </style>\n\n      <MF className=\"mfTxtStyle\" mf={props.mf} />\n    </div>\n  );\n}\n\nconst mfStyle = {\n  background: '#f4f4f4',\n  padding: '10px',\n  borderBottom: '1px solid #ccc ',\n  textAlign: 'center',\n};\n","export default async function getIdCodes(mf, options = {}) {\n  const { maxResults } = options;\n  const response = await fetch(\n    `https://www.cheminfo.org/webservices/pmgJson?fields=idCode&mf=${mf}`,\n    {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded',\n      },\n      method: 'GET',\n    },\n  );\n  const results = await response.json();\n\n  return results.slice(0, maxResults);\n}\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport About from './components/About';\nimport Content from './components/Content';\nimport Header from './components/Header';\nimport Input from './components/Input';\nimport ShowMF from './components/ShowMF';\nimport './App.css';\nimport getIdCodes from './components/getIdCodes';\n\nexport default function App() {\n  const [mf, setMF] = useState('');\n  const [content, setContent] = useState('molecules');\n  const [idCodes, setIdCodes] = useState([]);\n\n  useEffect(() => {\n    if (mf) {\n      setContent('loading');\n      getIdCodes(mf, setContent)\n        .then((results) => {\n          setIdCodes(results);\n          setContent('molecules');\n        })\n        .catch(() => setContent('error'));\n    }\n  }, [mf]); // the callback is executed only if mf changes\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Route\n          exact\n          path=\"/react-mol-structures\"\n          render={() => (\n            <React.Fragment>\n              <Input setMF={setMF} />\n              <ShowMF mf={mf} />\n              <Content content={content} idCodes={idCodes} />\n            </React.Fragment>\n          )}\n        />\n        <Route path=\"/react-mol-structures/about\" component={About} />\n      </div>\n    </Router>\n  );\n}\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}