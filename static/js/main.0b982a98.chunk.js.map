{"version":3,"sources":["components/Molecules.js","components/Content.js","components/Header.js","components/Input.js","components/ShowMF.js","components/getIdCodes.js","App.js","serviceWorker.js","index.js"],"names":["Molecules","props","className","idCodes","map","entry","key","idCode","style","msStyle","idcode","background","border","Content","content","errorStyle","loadingStyle","color","fontSize","textAlign","padding","fontWeight","Header","headerStyle","Input","useState","input","state","setState","onSubmit","event","preventDefault","setMF","display","type","name","flex","placeholder","value","onChange","target","ShowMF","mfStyle","mf","borderBottom","a","options","maxResults","fetch","headers","method","response","json","results","slice","App","setContent","setIdCodes","useEffect","getIdCodes","then","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0b982a98.chunk.js","sourcesContent":["import React from 'react';\nimport { IdcodeSvgRenderer } from 'react-ocl';\n\nimport './Molecules.css';\n\nexport default function Molecules(props) {\n  return (\n    <div className=\"molStyle\">\n      {props.idCodes.map((entry) => (\n        <div key={entry.idCode} style={msStyle}>\n          <IdcodeSvgRenderer idcode={entry.idCode} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst msStyle = {\n  background: '#f4f4f4',\n  border: '1px solid #ccc',\n};\n","// function-based component! (vs class-based components)\n\nimport React from 'react';\n\nimport Molecules from './Molecules';\n\nexport default function Content(props) {\n  switch (props.content) {\n    case 'molecules':\n      return <Molecules idCodes={props.idCodes} />;\n    case 'error':\n      return <p style={errorStyle}>ERROR: Invalid molecular formula</p>;\n    case 'loading':\n      return <p style={loadingStyle}>Loading...</p>;\n    default:\n      break;\n  }\n}\n\nconst errorStyle = {\n  color: 'red',\n  fontSize: '20px',\n  textAlign: 'center',\n  padding: '10px',\n  fontWeight: 'bold',\n};\n\nconst loadingStyle = {\n  fontSize: '20px',\n  textAlign: 'center',\n  padding: '10px',\n  fontWeight: 'bold',\n};\n","import React from 'react';\n\nexport default function Header() {\n  return (\n    <header style={headerStyle}>\n      <div>\n        <h1>Molecular structures calculator</h1>\n      </div>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  background: '#334',\n  color: '#fff',\n  textAlign: 'center',\n  padding: '10px',\n};\n","import React, { useState } from 'react';\n\nexport default function Input(props) {\n  // this is a component state\n  const [state, setState] = useState({\n    input: '',\n  });\n\n  function onSubmit(event) {\n    event.preventDefault(); // ?\n    props.setMF(state.input);\n    setState({ input: '' });\n  }\n\n  function handleNewEntry(event) {\n    setState({ [event.target.name]: event.target.value });\n  }\n\n  return (\n    <form onSubmit={onSubmit} style={{ display: 'flex' }}>\n      <input\n        type=\"text\"\n        name=\"input\"\n        style={{ flex: '10', padding: '5px' }}\n        placeholder=\"Enter a simple molecular formula ...\"\n        value={state.input}\n        onChange={handleNewEntry}\n      />\n      <input\n        type=\"submit\"\n        value=\"Submit\"\n        className=\"button\"\n        style={{ flex: '1' }}\n      />\n    </form>\n  );\n}\n","import React from 'react';\nimport { MF } from 'react-mf';\n\nexport default function ShowMF(props) {\n  return (\n    <div style={mfStyle}>\n      <style>\n        {`.mfTxtStyle {\n                font-weight: bold;\n                font-size: 20px;\n              }`}\n      </style>\n\n      <MF className=\"mfTxtStyle\" mf={props.mf} />\n    </div>\n  );\n}\n\nconst mfStyle = {\n  background: '#f4f4f4',\n  padding: '10px',\n  borderBottom: '1px solid #ccc ',\n  textAlign: 'center',\n};\n","export default async function getIdCodes(mf, options = {}) {\n  const { maxResults } = options;\n  const response = await fetch(\n    `https://www.cheminfo.org/webservices/pmgJson?fields=idCode&mf=${mf}`,\n    {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded',\n      },\n      method: 'GET',\n    },\n  );\n  const results = await response.json();\n\n  return results.slice(0, maxResults);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Content from './components/Content';\nimport Header from './components/Header';\nimport Input from './components/Input';\nimport ShowMF from './components/ShowMF';\nimport './App.css';\nimport getIdCodes from './components/getIdCodes';\n\nexport default function App() {\n  const [mf, setMF] = useState('');\n  const [content, setContent] = useState('molecules');\n  const [idCodes, setIdCodes] = useState([]);\n\n  useEffect(() => {\n    if (mf) {\n      setContent('loading');\n      getIdCodes(mf, setContent)\n        .then((results) => {\n          setIdCodes(results);\n          setContent('molecules');\n        })\n        .catch(() => setContent('error'));\n    }\n  }, [mf]); // the callback is executed only if mf changes\n  return (\n    <div className=\"App\">\n      <Header />\n      <Input setMF={setMF} />\n      <ShowMF mf={mf} />\n      <Content content={content} idCodes={idCodes} />\n    </div>\n  );\n}\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}